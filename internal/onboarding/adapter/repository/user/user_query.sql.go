// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_query.sql

package user

import (
	"context"
	"time"
)

const findUserByID = `-- name: FindUserByID :one
SELECT
    id,
    name,
    phone_number,
    role,
    created_at
FROM users
WHERE
    id = $1
`

func (q *Queries) FindUserByID(ctx context.Context, id int) (*User, error) {
	row := q.db.QueryRow(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Role,
		&i.CreatedAt,
	)
	return &i, err
}

const getUserAddresses = `-- name: GetUserAddresses :many
SELECT
    id,
    user_id,
    street,
    city,
    zip_code,
    latitude,
    longitude
FROM addresses
WHERE
    user_id = $1
`

func (q *Queries) GetUserAddresses(ctx context.Context, userID int) ([]*Address, error) {
	rows, err := q.db.Query(ctx, getUserAddresses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Street,
			&i.City,
			&i.ZipCode,
			&i.Latitude,
			&i.Longitude,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAddress = `-- name: InsertAddress :one
INSERT INTO
    addresses (
        user_id,
        street,
        city,
        zip_code,
        latitude,
        longitude
    )
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id
`

type InsertAddressParams struct {
	UserID    int
	Street    string
	City      string
	ZipCode   string
	Latitude  float64
	Longitude float64
}

func (q *Queries) InsertAddress(ctx context.Context, arg *InsertAddressParams) (int, error) {
	row := q.db.QueryRow(ctx, insertAddress,
		arg.UserID,
		arg.Street,
		arg.City,
		arg.ZipCode,
		arg.Latitude,
		arg.Longitude,
	)
	var id int
	err := row.Scan(&id)
	return id, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO
    users (
        name,
        phone_number,
        role,
        created_at
    )
VALUES ($1, $2, $3, $4) RETURNING id
`

type InsertUserParams struct {
	Name        string
	PhoneNumber string
	Role        string
	CreatedAt   time.Time
}

func (q *Queries) InsertUser(ctx context.Context, arg *InsertUserParams) (int, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.Name,
		arg.PhoneNumber,
		arg.Role,
		arg.CreatedAt,
	)
	var id int
	err := row.Scan(&id)
	return id, err
}

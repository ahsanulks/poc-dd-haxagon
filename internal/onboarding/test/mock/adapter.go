// Code generated by MockGen. DO NOT EDIT.
// Source: internal/onboarding/adapter/adapter.go
//
// Generated by this command:
//
//	mockgen -source=internal/onboarding/adapter/adapter.go -destination=internal/onboarding/test/mock/adapter.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entity "poc/internal/onboarding/entity"
	usecase "poc/internal/onboarding/usecase"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRegistrationUsecase is a mock of RegistrationUsecase interface.
type MockRegistrationUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationUsecaseMockRecorder
}

// MockRegistrationUsecaseMockRecorder is the mock recorder for MockRegistrationUsecase.
type MockRegistrationUsecaseMockRecorder struct {
	mock *MockRegistrationUsecase
}

// NewMockRegistrationUsecase creates a new mock instance.
func NewMockRegistrationUsecase(ctrl *gomock.Controller) *MockRegistrationUsecase {
	mock := &MockRegistrationUsecase{ctrl: ctrl}
	mock.recorder = &MockRegistrationUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistrationUsecase) EXPECT() *MockRegistrationUsecaseMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegistrationUsecase) Register(ctx context.Context, params *usecase.RegistrationRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRegistrationUsecaseMockRecorder) Register(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistrationUsecase)(nil).Register), ctx, params)
}

// MockAddressManagementUsecase is a mock of AddressManagementUsecase interface.
type MockAddressManagementUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAddressManagementUsecaseMockRecorder
}

// MockAddressManagementUsecaseMockRecorder is the mock recorder for MockAddressManagementUsecase.
type MockAddressManagementUsecaseMockRecorder struct {
	mock *MockAddressManagementUsecase
}

// NewMockAddressManagementUsecase creates a new mock instance.
func NewMockAddressManagementUsecase(ctrl *gomock.Controller) *MockAddressManagementUsecase {
	mock := &MockAddressManagementUsecase{ctrl: ctrl}
	mock.recorder = &MockAddressManagementUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressManagementUsecase) EXPECT() *MockAddressManagementUsecaseMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockAddressManagementUsecase) AddAddress(ctx context.Context, addressReq *usecase.AddAddressRequest) (*entity.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", ctx, addressReq)
	ret0, _ := ret[0].(*entity.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockAddressManagementUsecaseMockRecorder) AddAddress(ctx, addressReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockAddressManagementUsecase)(nil).AddAddress), ctx, addressReq)
}

// GetAddress mocks base method.
func (m *MockAddressManagementUsecase) GetAddress(ctx context.Context, userID int) ([]*entity.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", ctx, userID)
	ret0, _ := ret[0].([]*entity.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockAddressManagementUsecaseMockRecorder) GetAddress(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockAddressManagementUsecase)(nil).GetAddress), ctx, userID)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/onboarding/entity/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/onboarding/entity/repository.go -destination=internal/onboarding/test/mock/repository.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entity "poc/internal/onboarding/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRegistrator is a mock of Registrator interface.
type MockRegistrator struct {
	ctrl     *gomock.Controller
	recorder *MockRegistratorMockRecorder
}

// MockRegistratorMockRecorder is the mock recorder for MockRegistrator.
type MockRegistratorMockRecorder struct {
	mock *MockRegistrator
}

// NewMockRegistrator creates a new mock instance.
func NewMockRegistrator(ctrl *gomock.Controller) *MockRegistrator {
	mock := &MockRegistrator{ctrl: ctrl}
	mock.recorder = &MockRegistratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistrator) EXPECT() *MockRegistratorMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegistrator) Register(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockRegistratorMockRecorder) Register(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistrator)(nil).Register), ctx, user)
}

// MockTokenGenerator is a mock of TokenGenerator interface.
type MockTokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenGeneratorMockRecorder
}

// MockTokenGeneratorMockRecorder is the mock recorder for MockTokenGenerator.
type MockTokenGeneratorMockRecorder struct {
	mock *MockTokenGenerator
}

// NewMockTokenGenerator creates a new mock instance.
func NewMockTokenGenerator(ctrl *gomock.Controller) *MockTokenGenerator {
	mock := &MockTokenGenerator{ctrl: ctrl}
	mock.recorder = &MockTokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenGenerator) EXPECT() *MockTokenGeneratorMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockTokenGenerator) GenerateToken(ctx context.Context, user *entity.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockTokenGeneratorMockRecorder) GenerateToken(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockTokenGenerator)(nil).GenerateToken), ctx, user)
}

// MockAddressModifier is a mock of AddressModifier interface.
type MockAddressModifier struct {
	ctrl     *gomock.Controller
	recorder *MockAddressModifierMockRecorder
}

// MockAddressModifierMockRecorder is the mock recorder for MockAddressModifier.
type MockAddressModifierMockRecorder struct {
	mock *MockAddressModifier
}

// NewMockAddressModifier creates a new mock instance.
func NewMockAddressModifier(ctrl *gomock.Controller) *MockAddressModifier {
	mock := &MockAddressModifier{ctrl: ctrl}
	mock.recorder = &MockAddressModifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressModifier) EXPECT() *MockAddressModifierMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockAddressModifier) AddAddress(ctx context.Context, userID int, address *entity.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", ctx, userID, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockAddressModifierMockRecorder) AddAddress(ctx, userID, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockAddressModifier)(nil).AddAddress), ctx, userID, address)
}

// MockAddressGetter is a mock of AddressGetter interface.
type MockAddressGetter struct {
	ctrl     *gomock.Controller
	recorder *MockAddressGetterMockRecorder
}

// MockAddressGetterMockRecorder is the mock recorder for MockAddressGetter.
type MockAddressGetterMockRecorder struct {
	mock *MockAddressGetter
}

// NewMockAddressGetter creates a new mock instance.
func NewMockAddressGetter(ctrl *gomock.Controller) *MockAddressGetter {
	mock := &MockAddressGetter{ctrl: ctrl}
	mock.recorder = &MockAddressGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressGetter) EXPECT() *MockAddressGetterMockRecorder {
	return m.recorder
}

// GetUserAddresses mocks base method.
func (m *MockAddressGetter) GetUserAddresses(ctx context.Context, userID int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAddresses", ctx, userID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAddresses indicates an expected call of GetUserAddresses.
func (mr *MockAddressGetterMockRecorder) GetUserAddresses(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAddresses", reflect.TypeOf((*MockAddressGetter)(nil).GetUserAddresses), ctx, userID)
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: order_query.sql

package order

import (
	"context"
	"time"
)

const insertOrder = `-- name: InsertOrder :one
INSERT INTO
    orders (
        user_id,
        total_price,
        created_at
    )
VALUES ($1, $2, $3) RETURNING id
`

type InsertOrderParams struct {
	UserID     int
	TotalPrice float64
	CreatedAt  time.Time
}

func (q *Queries) InsertOrder(ctx context.Context, arg *InsertOrderParams) (int, error) {
	row := q.db.QueryRow(ctx, insertOrder, arg.UserID, arg.TotalPrice, arg.CreatedAt)
	var id int
	err := row.Scan(&id)
	return id, err
}

const insertOrderAddress = `-- name: InsertOrderAddress :one
INSERT INTO
    order_addresses (
        order_id,
        street,
        city,
        zip_code,
        latitude,
        longitude
    )
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id
`

type InsertOrderAddressParams struct {
	OrderID   int
	Street    string
	City      string
	ZipCode   string
	Latitude  float64
	Longitude float64
}

func (q *Queries) InsertOrderAddress(ctx context.Context, arg *InsertOrderAddressParams) (int, error) {
	row := q.db.QueryRow(ctx, insertOrderAddress,
		arg.OrderID,
		arg.Street,
		arg.City,
		arg.ZipCode,
		arg.Latitude,
		arg.Longitude,
	)
	var id int
	err := row.Scan(&id)
	return id, err
}
